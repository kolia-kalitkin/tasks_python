
# Ваша задача создать следующие пустые классы
#     Vehicle     
#     Car     
#     Plane     
#     Boat     
#     RaceCar 
# Перечисленные класс должны находиться в следующей иерархии: 
# Класс Vehicle является базовым классом, от которого наследуются все остальные.
#-----------------------------------------------------------------------------------

class Vehicle():
    pass


class Car(Vehicle):
    pass


class Plane(Vehicle):
    pass


class Boat(Vehicle):
    pass


class RaceCar(Car):
    pass


# -------------код для проверки-------------------------
vehicle = Vehicle()
car = Car()
plane = Plane()
boat = Boat()
race_car = RaceCar()

assert isinstance(vehicle, Vehicle)
assert isinstance(car, Car)
assert isinstance(plane, Plane)
assert isinstance(boat, Boat)
assert isinstance(race_car, RaceCar)
assert vehicle.__dict__ == {}
assert car.__dict__ == {}

assert issubclass(Car, Vehicle), "Класс Car должен наследоваться от Venicle"
assert issubclass(
    Plane, Vehicle), "Класс Plane должен наследоваться от Venicle"
assert issubclass(Boat, Vehicle), "Класс Boat должен наследоваться от Venicle"
assert issubclass(
    RaceCar, Car), "Класс RaceCar должен наследоваться от Venicle"
assert issubclass(
    RaceCar, Vehicle), "Класс RaceCar должен наследоваться от Venicle"
print('Good')
#-----------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------



# Создайте базовый класс Vehicle, у которого есть:
#     конструктор __init__, принимающий название транспортного средства, его максимальную скорость и пробег. Их необходимо сохранить в атрибуты экземпляра name, max_speed и mileage соответственно
#     метод display_info , который печатает информацию в следующем виде:
#     Vehicle Name: {name}, Speed: {max_speed}, Mileage: {mileage}
# Затем создайте подкласс Bus , унаследованный от Vehicle. Оставьте его пустым
# bus_99 = Bus("Ikarus", 66, 124567)
# bus_99.display_info() #печатает "Vehicle Name: Ikarus, Speed: 66, Mileage: 124567"
# 
# ---------------------------------------------------------------
    
class Vehicle():
    def __init__(self, name, max_speed, mileage) -> None:
        self.name = name
        self.max_speed = max_speed
        self.mileage = mileage

    def display_info(self):
        print(f'Vehicle Name: {self.name}, Speed: {self.max_speed}, Mileage: {self.mileage}')

class Bus(Vehicle):
    pass

bus_99 = Bus("Ikarus", 66, 124567)
bus_99.display_info() #печатает "Vehicle Name: Ikarus, Speed: 66, Mileage: 124567"

# -------------код для проверки-------------------------
assert issubclass(Bus, Vehicle)
bus_99 = Bus("Ikarus", 66, 124567)
assert bus_99.name == 'Ikarus'
assert bus_99.max_speed == 66
assert bus_99.mileage == 124567
bus_99.display_info()

modelX = Vehicle('modelX', 240, 18)
assert modelX.__dict__ == {'max_speed': 240, 'mileage': 18, 'name': 'modelX'}
modelX.display_info()

audi = Bus('audi', 123, 43)
assert audi.__dict__ == {'max_speed': 123, 'mileage': 43, 'name': 'audi'}, 'Видимо забыли создать какой-то атрибут'
audi.display_info()
# ---------------------------------------------------------------

# ---------------------------------------------------------------



# Создайте базовый класс  Person, у которого есть:
#     конструктор __init__, который должен принимать на вход имя и записывать его в атрибут name
#  метод get_name, который возвращает атрибут name
# метод  is_employee, который возвращает  False
# Затем создайте подкласс Employee , унаследованный от Person. В нем должен быть реализован:
#     метод  is_employee, который возвращает  True
# ---------------------------------------------------------------
 
     
class Person:
    def __init__(self, name) -> None:
        self.name = name

    def get_name(self):
        return self.name

    def is_employee(self):
        return False

class    Employee(Person):
    def is_employee(self):
        return True

# -------------код для проверки-------------------------
assert issubclass(Employee, Person)

p = Person("just human")
assert p.name == 'just human'
assert p.get_name() == 'just human'
assert p.is_employee() is False

emp = Employee("Geek")
assert emp.name == 'Geek'
assert emp.get_name() == 'Geek'
assert emp.is_employee() is True
print('Good')
# ---------------------------------------------------------------

# ---------------------------------------------------------------


# Реализуйте следующую иерархию классов
# Напишите только определение классов, сами классы оставьте пустыми.
#  
# ---------------------------------------------------------------
class Shape():
    pass

class Polygon(Shape):
    pass
class Ellipse(Shape):
    pass

class Rectangle(Polygon):
    pass
class Triangle(Polygon):
    pass

class Square(Rectangle):
    pass

class Circle(Ellipse):
    pass


# Ниже располагаются проверки

assert issubclass(Ellipse, Shape), "Класс Ellipse должен наследоваться от Shape"
assert issubclass(Polygon, Shape), "Класс Polygon должен наследоваться от Shape"

assert issubclass(Circle, Shape), "Класс Circle должен наследоваться от Shape"
assert issubclass(Circle, Ellipse), "Класс Circle должен наследоваться от Ellipse"
assert not issubclass(Circle, Polygon), "Класс Circle не должен наследоваться от Polygon"

assert issubclass(Triangle, Polygon), "Класс Triangle должен наследоваться от Polygon"
assert issubclass(Triangle, Shape), "Класс Triangle должен наследоваться от Shape"
assert not issubclass(Triangle, Ellipse), "Класс Triangle не должен наследоваться от Ellipse"

assert issubclass(Square, Rectangle), "Класс Square должен наследоваться от Rectangle"
assert issubclass(Square, Polygon), "Класс Square должен наследоваться от Polygon"
assert issubclass(Square, Shape), "Класс Square должен наследоваться от Shape"
assert not issubclass(Square, Ellipse), "Класс Square не должен наследоваться от Ellipse"
print('Good')
# ---------------------------------------------------------------

# ---------------------------------------------------------------



# Я создал для вас список shapes, которых хранит в себе экземпляры  различных фигур. Фигуры перемешаны, созданы в хаотичном порядке 
# Ваша задача найти и вывести 3 числа в разных строках:
#     на первой строке количество кружочков
#     на второй строке количество фигур, являющихся прямоугольниками
#     на последней строке количество фигур, являющихся многоугольниками.
# 
# ---------------------------------------------------------------

from collections import Counter


class Shape():
    pass

class Polygon(Shape):
    pass
class Ellipse(Shape):
    pass

class Rectangle(Polygon):
    pass
class Triangle(Polygon):
    pass

class Square(Rectangle):
    pass

class Circle(Ellipse):
    pass

shapes = [
    Polygon(), Triangle(), Ellipse(), Polygon(), Triangle(), Ellipse(), Polygon(), Square(), Polygon(), Circle(),
    Shape(), Polygon(), Triangle(), Circle(), Ellipse(), Shape(), Circle(), Rectangle(), Circle(), Circle(),
    Square(), Square(), Circle(), Rectangle(), Rectangle(), Polygon(), Polygon(), Polygon(), Square(), Square(),
    Rectangle(), Square(), Rectangle(), Polygon(), Circle(), Triangle(), Rectangle(), Shape(), Rectangle(),
    Polygon(), Polygon(), Ellipse(), Square(), Circle(), Shape(), Polygon(), Ellipse(), Triangle(), Square(),
    Polygon(), Triangle(), Circle(), Rectangle(), Rectangle(), Ellipse(), Triangle(), Rectangle(), Polygon(),
    Shape(), Circle(), Rectangle(), Polygon(), Triangle(), Circle(), Polygon(), Rectangle(), Polygon(), Square(),
    Triangle(), Circle(), Ellipse(), Circle(), Shape(), Circle(), Triangle(), Ellipse(), Square(), Circle(),
    Triangle(), Polygon(), Square(), Polygon(), Circle(), Ellipse(), Polygon(), Shape(), Triangle(), Rectangle(),
    Circle(), Square(), Triangle(), Triangle(), Ellipse(), Square(), Circle(), Rectangle(), Ellipse(), Shape(),
    Triangle(), Ellipse(), Circle(), Shape(), Polygon(), Polygon(), Ellipse(), Rectangle(), Square(), Shape(),
    Circle(), Triangle(), Circle(), Circle(), Circle(), Triangle(), Ellipse(), Polygon(), Circle(), Ellipse(),
    Rectangle(), Circle(), Shape(), Polygon(), Polygon(), Triangle(), Rectangle(), Polygon(), Shape(), Circle(),
    Shape(), Circle(), Triangle(), Ellipse(), Square(), Circle(), Triangle(), Ellipse(), Square(), Circle(),
]

l1 = filter(lambda x: isinstance(x, Circle), shapes)
l2 = filter(lambda x: isinstance(x, Rectangle), shapes)
l3 = filter(lambda x: isinstance(x, Polygon), shapes)

print(len(tuple(l1)))
print(len(tuple(l2)))
print(len(tuple(l3)))
# -------------код для проверки-------------------------

# ---------------------------------------------------------------



# Давайте усовершенствуем наш класс MyList.
# У списков есть полезный метод .remove(value), который позволяет удалить значение value один раз из списка. Если value отсутствует в списке, происходит исключение ValueError.
# Ваша задача создать метод .remove_all(value), который будет удалять сразу все значения, которые равны value. Если value отсутствует в списке, ничего делать не нужно. Метод в конце своей работы должен вернуть None
# ---------------------------------------------------------------
class MyList(list):
    def remove_all(self, value):
        
        try:
            while True:
                self.remove(value)             
        
        except ValueError:
            pass


# тесты
s = MyList([1, 2, 3, 2, 1, 2])
assert s == [1, 2, 3, 2, 1, 2]
s.remove_all(2)
assert s == [1, 3, 1]
s.remove_all(1)
assert s == [3]
s.remove_all(5)
assert s == [3]
s.remove_all(3)
assert s == []

k = MyList([0]*20)
assert k == [0]*20
k.remove_all(7)
assert k == [0]*20
k.append(8)
k.append(0)
k.append(2)
k.remove_all(0)
assert k == [8, 2]
print('Good')
# ---------------------------------------------------------------

# ---------------------------------------------------------------



# Создайте класс NewInt, который унаследован от целого типа int, то есть мы будем унаследовать поведение целых чисел и значит экземплярам нашего класса будут поддерживать те же операции, что и целые числа.
# Дополнительно в классе NewInt нужно создать:
#     метод repeat, который принимает одно целое положительное число n (по умолчанию равное 2), обозначающее сколько раз нужно продублировать данное число. Метод repeat должен возвращать новое число, продублированное n раз (см пример ниже);
#     метод to_bin, который возвращает двоичное представление числа в качестве целого числа (может пригодиться функция bin или форматирование)
# ---------------------------------------------------------------
class NewInt(int):
    def repeat(self, n=2):
        return int(str(self) * n)

    def to_bin(self):        
        return int(f'{self:b}')


# код проверки
c1 = NewInt(9)
assert isinstance(c1, NewInt)
assert issubclass(NewInt, int)
assert c1 + 9 == 18
assert c1 * 9 == 81


c2 = NewInt(31)
assert c2.repeat() == 3131
assert c2.repeat(4) == 31313131
assert NewInt(16).to_bin() == 10000
assert NewInt(14).to_bin() == 1110    

print('Good')
# ---------------------------------------------------------------

# ---------------------------------------------------------------



# Определите дочерние классы Cube и Power4 (возведение в 4-ую степень) от класса Square так, чтобы они переопределяли метод get_value() и возвращали результат.
# 
# 
# ---------------------------------------------------------------
class Square:
    def get_value(self, a):
        return a * a  
    
class Cube(Square):
    def get_value(self, a):
        return a**3  

class Power4(Square):
    def get_value(self, a):
        return a**4  

# код проверки
assert issubclass(Cube, Square)
assert issubclass(Power4, Square)

cube = Cube()
assert cube.get_value(2) == 8
assert cube.get_value(-17) == -4913

power4 = Power4()
assert power4.get_value(5) == 625
assert power4.get_value(25) == 390625

print('Good')
# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------



# 
# 
# 
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------

